Hello World
I have added text

normal font -> Consolas, 'Courier New', monospace

Top 10 Extensions for ReactJs in VSCode are:
    -The Bracket Pair Colorizer extension.
    -The change-case extension.
    -The Code Spell Checker extension.
    -The Duplicate Selection extension.
    -The EditorConfig for VS Code extension.
    -The VSCode React Refactor extension.
    -The npm Intellisense extension.
    -The ESLint extension.
    -The ES7 React/Redux/GraphQL/React-Native snippets extension.
    -The Prettier â€“ Code formatted extension.

Turbo Console Log -> Pressing ctrl + alt + L

Component Types 

Two Types of Component -> 1.Stateless Functional Component -> JS Functional -> return that describe UI s
                          2.Stateful Class Component -> Class extending Component class
                                                        Render method return HTML e.g class welcome extends React.Component { Render()}

Components describe a part of the UI. They are re-usable and can also be nested inside another Component as well.

Functional Components

optional object of properties (props) => JS function => JSX

exporting => exporting defaults will give you the rights to change the name where you implement that component.
             export => you had to import the name with the same name! also had to include the curly brackets for e.g { name }

Class Components

optional receives (props) => es6 => JSX

it can maintain ... private state => only information to the current component

Functional Component vs Class Component

Functional
-simple function
-use func component as much as possible
-absence 'this' keyword
-solution without using state
-Mainly responsible for the UI
-called Stateless/Dumb/Presentational

Class

-More feature rich 
-Maintain their own private data -state
-Complex UI Logic
-Provide lifecycle hooks
-Stateful, Smart/ Container

JSX
-JavaScript XML (JSX) - Extension to the JS language syntax.
-Write XML-like code for elements and components.
-JSX tags have a tag name, attributes, and children.
-JSX is not a necessity to write React applications.
-JSX makes your react code simpler and elegant.
-JSX ultimately transpiled to pure JS which is understood by the browsers.

When you don't know what is the content is being passed in => unknown

Props => they are immutable. They cannot be changed. <= TypeError will occur.

Props Vs state

Props => its get passed to the component
         Function parameters
         props are immutable
         Access => props - Functional Component & this.props - Class Component
          

State => it is maintained within the component
         Variables declared in the function body
         state are mutable
         Access => useState Hook - Functional Components & this.state - Class Component

State => called to setState are asynchronous.

setState => (accept the value to change, callback function)

React makes group multiple setState calls into a single update for the BETTER PERFORMANCE.
*** Whenever you have to update the state based on previous state, you needed to pass a function as an argument to setState instead of passing in the object.

-Always make use of setState and never modify the state directly.
-Certain code has to be executed after the state has been updated. Place that code in the callback function which is the second argument of the setState method.
-Whenever you have to update the state based on previous state, you needed to pass a function as an argument to setState instead of passing in the object.
