Hello World
I have added text

normal font -> Consolas, 'Courier New', monospace

Top 10 Extensions for ReactJs in VSCode are:
    -The Bracket Pair Colorizer extension.
    -The change-case extension.
    -The Code Spell Checker extension.
    -The Duplicate Selection extension.
    -The EditorConfig for VS Code extension.
    -The VSCode React Refactor extension.
    -The npm Intellisense extension.
    -The ESLint extension.
    -The ES7 React/Redux/GraphQL/React-Native snippets extension.
    -The Prettier â€“ Code formatted extension.

Turbo Console Log -> Pressing ctrl + alt + L

Component Types 

Two Types of Component -> 1.Stateless Functional Component -> JS Functional -> return that describe UI s
                          2.Stateful Class Component -> Class extending Component class
                                                        Render method return HTML e.g class welcome extends React.Component { Render()}

Components describe a part of the UI. They are re-usable and can also be nested inside another Component as well.

Functional Components

optional object of properties (props) => JS function => JSX

exporting => exporting defaults will give you the rights to change the name where you implement that component.
             export => you had to import the name with the same name! also had to include the curly brackets for e.g { name }

Class Components

optional receives (props) => es6 => JSX

it can maintain ... private state => only information to the current component

Functional Component vs Class Component

Functional
-simple function
-use func component as much as possible
-absence 'this' keyword
-solution without using state
-Mainly responsible for the UI
-called Stateless/Dumb/Presentational

Class

-More feature rich 
-Maintain their own private data -state
-Complex UI Logic
-Provide lifecycle hooks
-Stateful, Smart/ Container

JSX
-JavaScript XML (JSX) - Extension to the JS language syntax.
-Write XML-like code for elements and components.
-JSX tags have a tag name, attributes, and children.
-JSX is not a necessity to write React applications.
-JSX makes your react code simpler and elegant.
-JSX ultimately transpiled to pure JS which is understood by the browsers.

When you don't know what is the content is being passed in => unknown

Props => they are immutable. They cannot be changed. <= TypeError will occur.

Props Vs state

Props => its get passed to the component
         Function parameters
         props are immutable
         Access => props - Functional Component & this.props - Class Component
          

State => it is maintained within the component
         Variables declared in the function body
         state are mutable
         Access => useState Hook - Functional Components & this.state - Class Component

State => called to setState are asynchronous.

setState => (accept the value to change, callback function)

React makes group multiple setState calls into a single update for the BETTER PERFORMANCE.
*** Whenever you have to update the state based on previous state, you needed to pass a function as an argument to setState instead of passing in the object.

-Always make use of setState and never modify the state directly.
-Certain code has to be executed after the state has been updated. Place that code in the callback function which is the second argument of the setState method.
-Whenever you have to update the state based on previous state, you needed to pass a function as an argument to setState instead of passing in the object.

Event Handling

When users are interacting with app, events are fired! 

1.Specify by camelCase
2.With JSX, you passed a function as event handler rather than a string.
3.onEvent = {eventHandler} => if you add parentheses, it will fire as a function call.
4.Generally eventHandler tends to modify the state of component using state method.

Binding with Event Handler 

`this` keyword 
-binding in the render method. this.handler.bind(this)
-arrow function inside onClick. () => this.handler(). if the function body is single statement, we don't need curly brackets.
-binding that event handler in the constructor as suppose binding in the render method. constructor() { super() this.state={} this.handler = this.handler.bind(this)}
-change the function declaration with arrow declaration. es6 style

Method as props
-When child component wanted to communicate with the parent component, props , passed in the reference to a method as props to the child component
-Event wanted to happen in the child component but will be executed the function from parent component. We passed the method as a prop itself to the child component.

passing parameters when calling parent function. use arrow function is useful. it function is the simplest way to pass parameters from child to parent.

Conditional Rendering

1.if/ese => doesn't work inside JSX which mean inside return. Because JSX is syntax for function calls and object construction.
2.Element variables => used JS variables to store elements. It can change entire thing or just a part.
3.Ternary conditional operator
4.Short circuit operator

List Rendering
-use map method for the list rendering 
-each item in the list rendered using should have prop key and should be unique. 
-key prop can be anything => id, name, .... anything that is unique
-key prop cannot be accessible in the child component. It will result in undefined.
-key prop is reserved. Don't use key prop to render data. 

Why do we need them, keys?
-Because React identify which item in the list has changed or added or removed, play the crucial role in UI. 
-How react handle update? React iterate over both the list at the same time and generate a mutation whenever there is a difference. React insert the update the tree by inserting item by the end of the list. Not breaking down whole tree and rebuild the tree.
-React uses keys to match the child to the original tree to the new tree.
-keys give the elements a stable identity.

What if there is no id? 
-Use index as a key. you can use with (value , index)
-Using name is one of the option but if there is at least one duplication it will still show the name.

Index as key anti-pattern
-the item in your list do not have a unique id.
-The list is a static list and will not change.
-The list will never be reordered or filtered.
-Just use it on last resort 

Styling React Components
-CSS stylesheets
-Inline styling => represent as an object and their keys are in camelCase and value is string.
-CSS Modules
-CSS in JS Libraries 

Controlled components
Such element which control by React is called controlled components.
-to convert to controlled components => 1.create the component state that will control the value of the input element. 
                                        2.handling the onChange event

Lifecycle Method

->When we create a react component goes to several stages and its lifecycle.
This method does not exist on Functional Component. useEffect hook which partially related to the lifecycle hook.
There are 4 phases => Mounting, Updating, Unmounting, Error Handling

Mounting => When an instance of a component is being created and inserted into the DOM.
Updating => When a component is being re-render as a result of changes to either its props or state.
Unmounting => When a component is being removed from the DOM.
Error Handling=> When there is an error during rendering, in a lifecycle method. or in the constructor of any child component.

Mounting => constructor, static getDerivedStateFromProps, render and componentDidMount. 
Updating => static getDerivedStateFromProps, shouldComponentUpdate, render, getSnapshotBeforeUpdate and componentDidUpdate.
Unmounting => componentWillUnmount
Error Handling => static getDerivedStateFromError and componentDidCatch

Mounting Lifecycle Methods
-constructor(props) => A special function that will get called whenever a new component is created. 
                       It is perfect for initializing state and binding the event handlers.
                       Do not cause side effects. Ex: HTTP requests. Never make a request!
                       super(props) This will call the base class constructor. Constructor is the only place where you expected to change by directly overwrite this.state

-static getDerivedStateFromProps(props, state) => rarely used lifecycle method.
                                    When the state of the component depends on changes in props over time.
                                    Set the state. It does not have access to this keyword. 
                                    Do not cause side effects. HTTP request

-render() => Only required method.
             Read props & state and return JSX
             Do not change state or interact with DOM or make ajax calls.
             Children components lifecycle methods are also executed.
        
-componentDidMount() => called only once and invoked immediately after a component and all its children components have been rendered to the DOM.
                        it is a perfect place to cause side effects. Ex: Interact with the DOM or perform any ajax calls to load data.

Updating Lifecycle Methods

static getDerivedStateFromProps(props, state) => Method is called every time a component is re-rendered.
                                                 Set the state
                                                 Do not cause side effects. HTTP request
                                                 rarely used lifecycle method.

shouldComponentUpdate(nextProps, nextState) => receives the updated props and state
                                               Dictates if the component should re-render or not.
                                               By default, every changes make to props or state will be re=render
                                               This method can prevent the default by returning false
                                               Performance optimization 
                                               rarely used lifecycle method.

render() => Only required method.
            Read props & state and return JSX
            Do not change state or interact with DOM or make ajax calls.
            Children components lifecycle methods are also executed.  

getSnapshotBeforeUpdate(prevProps, prevState) => Called right before the changes from the virtual DOM are to be reflected in the DOM.
                                                 rarely used lifecycle method.
                                                 Capture some information from the DOM.
                                                 Method will either return null or return a value. Returned value will be passed as the third parameter to the next method.
                                                 
componentDidUpdate(prevProps, prevState, snapshot) => called after the render is finished in the re-render cycles
                                                      you can be sure that the component and all its sub component have properly render itself after the update
                                                      Called only once.
                                                      Cause side effect.... called ajax but compare prevProps and NewProps whether you called ajax or not.

Unmounting Phase Method 

componentWillUnmount() => Method is invoked immediately before a component is unmounted and destroyed.
                          Cancelling any network requests, removing event handlers, Cancelling any subscriptions and also invalidating timers.
                          Do not call the setState method. it is because the component is never re-render after it has been unmounted.

Error Handling Phase Method 

static getDerivedStateFromError(error) 
                                        => When there is an error either during rendering, in a lifecycle method, or in the constructor of any child component.
componentDidCatch(error, info)

Fragments <></>

-It let you group a list of children elements without adding extra nodes to the DOM. 
-key attribute is the only attributes that can be added to react fragment.
-if you use shorthand syntax, you cannot use key.

Pure Component

-Difference between component class and pure component class
-If the parent component re-render, the child component will re-render. Unless return false from the shouldComponentUpdate
-Pure Component will not re-render.

-When will we use pure? => Most of the time, RC is used but only used it when your component hit Performance error

Regular Component =>  a regular component does not implement the shouldComponentUpdate method. It always returns true by default.

Pure Component => a pure component on the other hand implements shouldComponentUpdate with a shallow props and state comparison.

Shallow comparison(SC)
Primitive Types -> string, number, boolean 
a SC b returns true if a and b have the same value and area of the same type.
for example => 'Julian' === 'Julian' return true.

Complex Types -> object and array
a SC b returns true if a and b reference the exact same object.
for example => var a = [a,b,c] var b=[a,b,c] var c = a ; 
var ab_eq = (a === b) //false  => even though the items of both arrays are the same but those two array do not reference the same object
var ac_eq = (a === c) // true  

Pure Component => SC of prevState with currentState and SC of prevProps with currentProps only if the different is made, the component will re-render                                                                                                                                                                                      

*** You should not mutate object or array in props or state. If you want to add new item to the object or array, do not mutate it by pushing it to the list.
The reference to an array never changes and the PC only check for that the component will not re-render even if there is a difference. Always return a new object or array
when dealing with pure component***

Memo is to Functional as pure Component

Refs

-Refs make it possible to access DOM nodes within React.
1.Create Ref => It is common to create ref in the constructor because they can be reference throughout the component.
2.Attach the Ref to the element
3.Call the method on the element

Another possibility to use Ref => to fetch the input value.

Callback Ref approach => 1.create Ref. assign the value of null => this.cbRef = null
                         2.create a method that will assign the DOM element to the ref. this.setCallBackRef = (element) => { this .cbRef = element }
                         3.attach this ref to input element 
                         4.componentDidMount => if (this.cbRef) { this.cbRef.focus() }

Refs with Class Component => âœ…

Forwarding Refs => is a technique that pass automatically ref through a component to its children.
1.create ref in parent component
2.Attach the Ref to the element
3.Forward this ref to the element in the child component
When the component is passed as a parameter to create ref method, it receives ref attribute as 2nd parameters. This will come in handy when you are working with Libraries or high order component

Portals => Provide a way to render children to the DOM nodes that exist outside the DOM hierarchy of the parent component
        => Ability to break out of this DOM tree. So you can render a component onto the DOM node that is not under the root element

        1. added div tag with id portal-root below the root div.
        2. create a new component
        3. ReactDom.createPortal method to insert that component under the portal-root node.

        Why do we need them?
        -Having to deal with parent component CSS, when the child component is a modal, pop-up or a tool-tip
        -even though a portal can be any where in the DOM tree, it behave like a normal DOM child in every other way.
        -Event Bubbling => so event fire inside the portal will propagate to ancestors in the containing React tree even those element are not ancestors in the dom tree. 

Error Handling

Error Boundary => A class component that implements either one or both of the lifecycle methods getDerivedStateFromError or componentDidCatch becomes an error boundary.
-catch error during rendering in lifecycle method and in constructor whole tree below them.
-React component that catch JS error in their child component tree, log those errors, and display a fallback UI.
-The placement of the Error Boundary also matters as it controls if the entire app should have the fallback UI or just the component causing the problem.

static getDerivedStateFromError method => used to render a fallback UI after an error is thrown. It is not a good choice to hide all the true statements when there is something wrong.
componentDidCatch method => is used to log the error information.

Higher Order Component

Why HOC is important? => To share common functionality between components.

-A pattern where a function takes a component as an argument and returns a new component.  
e.g. => const NewComponent = higherOrderComponent( originalComponent )

const EnhancedComponent = higherOrderComponent( originalComponent )
-HOC is maintaining state

1.Passing down the prop => from the parent to the child, the prop value goes into the HOC component as a prop. Not to the child! 
        To fix this issue => Passed down the remaining props to the Wrapped Component using spread operator {...this.props}. Please make sure to pass down the prop

2.Passing parameters to the HOC function => passing a parameter to the HOC function. (WrappedComponent, method)

-Popular React Libraries => Connect HOC in Redux with Router in React Router, with styles in MaterialUI. It is a nice pattern that can be used to share common functionality 
 between React Components.

 React Props 
 -needs to share a common functionality between component.
-In React, it is possible to use prop whose value is a function to control what is actually render by a component.
What is render props?
The term "render prop" refers to a technique for sharing code between React components using  prop whose value is a function. 
-A Container component where we implement the common functionality that is the state and method.
-it can also use it with a children instead of render.