Hello World
I have added text

normal font -> Consolas, 'Courier New', monospace

Top 10 Extensions for ReactJs in VSCode are:
    -The Bracket Pair Colorizer extension.
    -The change-case extension.
    -The Code Spell Checker extension.
    -The Duplicate Selection extension.
    -The EditorConfig for VS Code extension.
    -The VSCode React Refactor extension.
    -The npm Intellisense extension.
    -The ESLint extension.
    -The ES7 React/Redux/GraphQL/React-Native snippets extension.
    -The Prettier â€“ Code formatted extension.

Turbo Console Log -> Pressing ctrl + alt + L

Component Types 

Two Types of Component -> 1.Stateless Functional Component -> JS Functional -> return that describe UI s
                          2.Stateful Class Component -> Class extending Component class
                                                        Render method return HTML e.g class welcome extends React.Component { Render()}

Components describe a part of the UI. They are re-usable and can also be nested inside another Component as well.

Functional Components

optional object of properties (props) => JS function => JSX

exporting => exporting defaults will give you the rights to change the name where you implement that component.
             export => you had to import the name with the same name! also had to include the curly brackets for e.g { name }

Class Components

optional receives (props) => es6 => JSX

it can maintain ... private state => only information to the current component

Functional Component vs Class Component

Functional
-simple function
-use func component as much as possible
-absence 'this' keyword
-solution without using state
-Mainly responsible for the UI
-called Stateless/Dumb/Presentational

Class

-More feature rich 
-Maintain their own private data -state
-Complex UI Logic
-Provide lifecycle hooks
-Stateful, Smart/ Container

JSX
-JavaScript XML (JSX) - Extension to the JS language syntax.
-Write XML-like code for elements and components.
-JSX tags have a tag name, attributes, and children.
-JSX is not a necessity to write React applications.
-JSX makes your react code simpler and elegant.
-JSX ultimately transpiled to pure JS which is understood by the browsers.

When you don't know what is the content is being passed in => unknown

Props => they are immutable. They cannot be changed. <= TypeError will occur.

Props Vs state

Props => its get passed to the component
         Function parameters
         props are immutable
         Access => props - Functional Component & this.props - Class Component
          

State => it is maintained within the component
         Variables declared in the function body
         state are mutable
         Access => useState Hook - Functional Components & this.state - Class Component

State => called to setState are asynchronous.

setState => (accept the value to change, callback function)

React makes group multiple setState calls into a single update for the BETTER PERFORMANCE.
*** Whenever you have to update the state based on previous state, you needed to pass a function as an argument to setState instead of passing in the object.

-Always make use of setState and never modify the state directly.
-Certain code has to be executed after the state has been updated. Place that code in the callback function which is the second argument of the setState method.
-Whenever you have to update the state based on previous state, you needed to pass a function as an argument to setState instead of passing in the object.

Event Handling

When users are interacting with app, events are fired! 

1.Specify by camelCase
2.With JSX, you passed a function as event handler rather than a string.
3.onEvent = {eventHandler} => if you add parentheses, it will fire as a function call.
4.Generally eventHandler tends to modify the state of component using state method.

Binding with Event Handler 

`this` keyword 
-binding in the render method. this.handler.bind(this)
-arrow function inside onClick. () => this.handler(). if the function body is single statement, we don't need curly brackets.
-binding that event handler in the constructor as suppose binding in the render method. constructor() { super() this.state={} this.handler = this.handler.bind(this)}
-change the function declaration with arrow declaration. es6 style

Method as props
-When child component wanted to communicate with the parent component, props , passed in the reference to a method as props to the child component
-Event wanted to happen in the child component but will be executed the function from parent component. We passed the method as a prop itself to the child component.

passing parameters when calling parent function. use arrow function is useful. it function is the simplest way to pass parameters from child to parent.

Conditional Rendering

1.if/ese => doesn't work inside JSX which mean inside return. Because JSX is syntax for function calls and object construction.
2.Element variables => used JS variables to store elements. It can change entire thing or just a part.
3.Ternary conditional operator
4.Short circuit operator

List Rendering
-use map method for the list rendering 
-each item in the list rendered using should have prop key and should be unique. 
-key prop can be anything => id, name, .... anything that is unique
-key prop cannot be accessible in the child component. It will result in undefined.
-key prop is reserved. Don't use key prop to render data. 

Why do we need them, keys?
-Because React identify which item in the list has changed or added or removed, play the crucial role in UI. 
-How react handle update? React iterate over both the list at the same time and generate a mutation whenever there is a difference. React insert the update the tree by inserting item by the end of the list. Not breaking down whole tree and rebuild the tree.
-React uses keys to match the child to the original tree to the new tree.
-keys give the elements a stable identity.

What if there is no id? 
-Use index as a key. you can use with (value , index)
-Using name is one of the option but if there is at least one duplication it will still show the name.

Index as key anti-pattern
-the item in your list do not have a unique id.
-The list is a static list and will not change.
-The list will never be reordered or filtered.
-Just use it on last resort 

Styling React Components
-CSS stylesheets
-Inline styling => represent as an object and their keys are in camelCase and value is string.
-CSS Modules
-CSS in JS Libraries 

Controlled components
Such element which control by React is called controlled components.
-to convert to controlled components => 1.create the component state that will control the value of the input element. 
                                        2.handling the onChange event